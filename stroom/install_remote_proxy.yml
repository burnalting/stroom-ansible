---

########### LOCALHOST  ###########

- hosts:
    - localhost
  gather_facts: false
  vars:
  tasks:

    - name: 'Check mandatory variables are defined'
      assert:
        that:
          - local_config_dir is defined

    - debug:
        msg:
          - "local_config_dir: {{ local_config_dir }}"
      tags:
        - all


########### 'stroom_remote_proxy_stack' HOSTS  ###########

- hosts:
    - stroom_remote_proxy_stack
  gather_facts: true # Needed for yum stuff
  vars:
    stack_bin_dir: "{{ stack_install_root_dir }}/{{ stack_name }}/{{ stack_name }}-{{ stack_version }}"
    stack_config_dir: "{{ stack_install_root_dir }}/{{ stack_name }}/{{ stack_name }}-{{ stack_version }}/config"
    stack_volumes_dir: "{{ stack_install_root_dir }}/{{ stack_name }}/volumes"
    stack_env_var_file: "{{ stack_config_dir }}/{{ stack_name }}.env"
    config_static_files_dir: "{{ local_config_dir }}/files/volumes"
    config_templates_dir: "{{ local_config_dir }}/templates/volumes"
    tmp: "/tmp"
  tasks:

    - name: 'Check mandatory variables are defined'
      assert:
        that:
          - local_config_dir is defined
          - proxy_forward_url is defined
          - stack_env_vars is defined
          - stack_install_root_dir is defined
          - stack_name is defined
          - stack_version is defined
          - stroom_user is defined

    - debug:
        msg:
          - "Deploying/configuring stroom-proxy in {{ stack_bin_dir }} as user {{ stroom_user }}"
      tags:
        - deploy
        - configure

    ################### SETUP HOST ###################

    - import_role:
        name: setup/common
      tags:
        - setup

    - import_role:
        name: setup/docker
      vars:
        docker_user: "{{ stroom_user }}" 
      tags:
        - setup

    - name: "Block of tasks to run as {{ stroom_user }}"
      become: yes
      become_user: "{{ stroom_user }}"
      block:

    ########### DEPLOY VANILLA REMOTE PROXY STACK  ###########

        - import_role:
            name: stack/download
          tags:
            - deploy

    ########### UPDATE REMOTE STACK CONFIG  ###########

        - import_role:
            name: stack/set_host_ip
          tags:
            - deploy
            - configure

        # NOTE: It is debatable if we configure the file like this or use a jinja template file
        # If we use templates then we need to maintain the template in this repo.
        # For real deployments where a clone/fork of this repo is used, jinja templates
        # would probably make more sense, and be a load faster.

          # Set all the env vars in the stack env file
        - import_role:
            name: stack/set_env_vars_values
          tags:
            - deploy
            - configure
        - debug:
            msg:
              - "config_static_files_dir: {{ config_static_files_dir }}"
              - "config_templates_dir: {{ config_templates_dir }}"
            verbosity: 2
          tags:
            - deploy
            - configure

          # TODO Not sure what implications this has on the docker bind mounted files.
          # See unsafe_writes in ansible docs
          # This approach does at least mean we don't have to specify what files need to
          # be copied, we just add them in the appropriate place.
        - name: "Copy static files from {{ config_static_files_dir }}/ to {{ stack_volumes_dir }}/"
          copy:
            src: "{{ config_static_files_dir }}/"
            dest: " {{ stack_volumes_dir }}/"
          #when: config_static_files_dir is directory
          #when: "tmp is directory"
          tags:
            - deploy
            - configure
            
              #TODO can we template all templates in a dir recursively?
        #- name: "Copy templated files from {{ config_templates_dir }}/ to {{ stack_volumes_dir }}/"
          #template:
            #src: "{{ config_templates_dir }}/"
            #dest: " {{ stack_volumes_dir }}/"
          ##when: config_templates_dir is exists
          #tags:
            #- deploy
            #- configure
