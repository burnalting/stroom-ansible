---
########### LOCALHOST  ###########

- hosts:
    - localhost
  gather_facts: false
  vars:
  tasks:

    - name: 'Check mandatory variables are defined'
      assert:
        that:
          - local_config_dir is defined

    - debug:
        msg:
          - "local_config_dir: {{ local_config_dir }}"
      tags:
        - all


########### 'stroom_remote_proxy_stack' HOSTS  ###########

- hosts:
    - stroom_remote_proxy_stack
  gather_facts: true # Needed for yum stuff
  vars:
    stack_bin_dir: "{{ stack_install_root_dir }}/{{ stack_name }}/{{ stack_name }}-{{ stack_version }}"
    stack_config_dir: "{{ stack_install_root_dir }}/{{ stack_name }}/{{ stack_name }}-{{ stack_version }}/config"
    stack_volumes_dir: "{{ stack_install_root_dir }}/{{ stack_name }}/volumes"
    stack_env_var_file: "{{ stack_config_dir }}/{{ stack_name }}.env"
    config_files_and_templates_dir: "{{ local_config_dir }}/files_and_templates/volumes"
  tasks:

    - name: 'Check mandatory variables are defined'
      assert:
        that:
          - local_config_dir is defined
          - proxy_forward_url is defined
          - stack_env_vars is defined
          - stack_install_root_dir is defined
          - stack_name is defined
          - stack_version is defined
          - stroom_user is defined

    - debug:
        msg:
          - "Deploying/configuring stroom-proxy in {{ stack_bin_dir }} as user {{ stroom_user }}"
      tags:
        - deploy
        - configure

    ################### SETUP HOST ###################

    - import_role:
        name: setup/common
      tags:
        - setup

    - import_role:
        name: setup/docker
      vars:
        docker_user: "{{ stroom_user }}" 
      tags:
        - setup

    - name: "Block of tasks to run as {{ stroom_user }}"
      become: yes
      become_user: "{{ stroom_user }}"
      block:

    ########### DEPLOY VANILLA REMOTE PROXY STACK  ###########

        - import_role:
            name: stack/download
          tags:
            - deploy

    # TODO move the updaty stuff into stack/update or similar role

    ########### UPDATE REMOTE STACK CONFIG  ###########

          # Remove the development certificates
        - import_role:
            name: stack/remove_certs
          tags:
            - remove_dev_certs
            - deploy
            - configure

          # Set the HOST_IP variable to the inventory hostname
        - import_role:
            name: stack/set_host_ip
          tags:
            - deploy
            - configure

        # NOTE: It is debatable if we configure the file like this or use a jinja template file
        # If we use templates then we need to maintain the template in this repo.
        # For real deployments where a clone/fork of this repo is used, jinja templates
        # would probably make more sense, and be a load faster.

          # Set all the env vars in the stack env file
        - import_role:
            name: stack/set_env_vars_values
          tags:
            - deploy
            - configure

        - debug:
            msg:
              - "config_files_and_templates_dir: {{ config_files_and_templates_dir }}"
            verbosity: 2
          tags:
            - deploy
            - configure

        - name: "Check if {{ config_files_and_templates_dir }} exists on the Ansible controller"
          local_action: stat path={{ config_files_and_templates_dir }}
          become: false
          register: _config_files_and_templates_dir_info
          tags:
            - deploy
            - configure

          # Copies any files (except *.j2 files) as they are to the remote
          # Mirrors the directory structure
          # Will only add/update files on the remote, not delete
          # To make deletion happen we would need to have all of the volumes dir
          # locally
        - name: Copy static files from {{ config_files_and_templates_dir }}/
                to {{ stack_volumes_dir }}/
          copy:
            src: "{{ item.src }}/"
            dest: "{{ stack_volumes_dir }}/{{ item.path }}"
            mode: "u=rwX,g=,o="
          with_filetree: "{{ config_files_and_templates_dir }}/"
          loop_control:
            label: "{{ item.path }}"
          when: _config_files_and_templates_dir_info.stat.exists 
                and item.state == 'file' 
                and item.path is not match ".*\.j2$"
          tags:
            - deploy
            - configure

          # Copies and templates any *.j2 files found in the tree, removing the .j2 extension
          # Mirrors the directory structure
          # Will only add/update files on the remote, not delete
        - name: Copy and template .j2 files from {{ config_files_and_templates_dir }}/
                to {{ stack_volumes_dir }}/
          template:
            src: "{{ item.src }}/"
            dest: "{{ stack_volumes_dir }}/{{ item.path | regex_replace('.j2$','') }}"
            mode: "u=rwX,g=,o="
          with_filetree: "{{ config_files_and_templates_dir }}/"
          loop_control:
            label: "{{ item.path }}"
          when: _config_files_and_templates_dir_info.stat.exists 
                and item.state == 'file' 
                and item.path is match ".*\.j2$"
          tags:
            - deploy
            - configure
